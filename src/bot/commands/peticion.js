const apps = require('../../models/application-model.js')

module.exports = {
    name: 'peticion',
    aliases: ['post', 'pl', 'postulacion'],
    async execute(client, msg, args) {

        let code = args[1]
        let reason = args.slice(2).join(" ")
        if (!code) return msg.inlineReply("‚ö†Ô∏è | Faltan argumentos.\nDebes ingresar la opci√≥n que deseas usar.\n\n**__Opciones:__**\n- \`seguir\`\n- \`aceptar\`\n- \`denegar\`");
        let findData = await apps.findOne({code: code});
        if (!findData) return msg.inlineReply("> Parece que el c√≥digo que ingresaste no se encuentra registrado en la base de datos o est√° mal puesto, int√©ntalo de nuevo.");
        let member = await msg.guild.members.fetch(findData.id).catch(() => { });
        let staff = await msg.guild.members.fetch(findData.staff).catch(() => { });

        switch (args[0].toLowerCase()) {
            case "seguir":
                if (findData.status === 'En revision' || 'Finalista' && 'Postulado') return msg.inlineReply(`> Esta postulaci√≥n ya se encuentra **${findData.status}**. El responsable de su aceptaci√≥n fue **${staff.user.tag}**`)
                let message = await msg.inlineReply(`> El usuario \`${member.user.tag}\` esta por entrar en la segunda etapa de la postulaci√≥n. ¬øEst√°s seguro de que quieres continuar?`)
                await message.react('‚úÖ');
                await message.react('‚ùå');

                setTimeout(async () => { await message.reactions.removeAll().catch(() => { }) }, 30000);
                await message.awaitReactions(async (reaction, user) => {
                    if (user.id !== msg.author.id) return;
                    if (!['‚úÖ', '‚ùå'].includes(reaction.emoji.name)) return;
                    if (reaction.emoji.name === '‚ùå') {
                        await message.delete()
                        return;
                    } else {
                        await message.reactions.removeAll().catch(() => { })
                        await message.delete()

                        await findData.updateOne({
                            staff: msg.author.tag,
                            status: "En revision"
                        })
                        await findData.save();

                        await member.send(`Hola **${member.user.username}** üí™,\n\n> Te informo que el departamento responsable del proceso de selecci√≥n ha actualizado el estado tu postulaci√≥n, la cual se encuentra **EN REVISI√ìN**.\n\n> Te sugerimos ser paciente en la espera de una nueva respuesta.`)
                        return msg.inlineReply(`üëÄ | Se le va informado al usuario \`${member.user.tag}\` sobre el proceso de su postulaci√≥n.`)
                    }
                })
                break;
            case "aceptar":
                if (!reason) return msg.inlineReply("> Necesitas dar una raz√≥n por la cual aceptar esta postulaci√≥n.")
                if (findData.status === 'Postulado') return msg.inlineReply("> No puedes aceptar a alguien sin primer haber pasado por la revisi√≥n.")
                if (findData.status === 'Finalista') return msg.inlineReply(`> Esta postulaci√≥n ya fue aceptada por **${staff.user.tag}**.`)

                let mds = await msg.inlineReply(`> A continuaci√≥n el usuario \`${member.user.tag}\` estar√° entrando en la ante√∫ltima fase de la postulaci√≥n escrita, esto quiere decir que se encuentra apto para dicha prueba. \n\n> Raz√≥n de la aprobaci√≥n: \`${reason}\`\n> **¬øEst√°s seguro que quieres hacer esto?**`)
                await mds.react('‚úÖ');
                await mds.react('‚ùå');

                setTimeout(async () => { await mds.reactions.removeAll().catch(() => { }) }, 30000);
                await mds.awaitReactions(async (reaction, user) => {
                    if (user.id !== msg.author.id) return;
                    if (!['‚úÖ', '‚ùå'].includes(reaction.emoji.name)) return;
                    if (reaction.emoji.name === '‚ùå') {
                        await mds.delete()
                        return;
                    } else {
                        await mds.reactions.removeAll().catch(() => { })
                        await mds.delete()

                        await findData.updateOne({
                            staff: msg.author.id,
                            reason: reason,
                            status: "Finalista"
                        })
                        await findData.save();

                        await member.roles.add("834583013995053086");
                        await member.send(`Hey **${member.user.username}** üòé,\n\n> Acabas de ser seleccionado para la segunda fase de la postulaci√≥n, esto quiere decir que se te ha otorgado un rol temporal en el servidor, donde los miembros de dicho departamento te informen lo que tienes que hacer para continuar.\n\n**__Este es el nuevo canal en el que tienes acceso__** <#834590155221631016>`)
                        return msg.inlineReply(`üì• | Se le va informado al usuario \`${member.user.tag}\` sobre el proceso de su postulaci√≥n.`)
                    }
                })
                break;
            case "denegar":
                if (!reason) return msg.inlineReply("> Necesitas dar una raz√≥n por la cual denegar esta postulaci√≥n.")

                if (findData.status === 'Postulado') {
                    return msg.inlineReply("> No puedes aceptar a alguien sin primer haber pasado por la revisi√≥n.")
                } else if (findData.status === 'Postulado') {
                    return msg.inlineReply(`> Esta postulaci√≥n ya fue aceptada por **${staff.user.tag}**.`)
                }

                await findData.updateOne({
                    staff: msg.author.id,
                    reason: reason,
                    status: "Finalista"
                })
                await findData.save();

                await member.send(`Hola **${member.user.username}**,\n\n> Te informamos que el departamento responsable del proceso de selecci√≥n no ha considerado tu postulaci√≥n para la vacante.`)
                await msg.inlineReply(`üì§ | Denegaci√≥n de la postulaci√≥n al usuario \`${member.user.tag}\` por la raz√≥n ${reason}. Se le ha informado al privado sobre dicha actualizaci√≥n.`)
                break;
            default:
                break;
        }
    }
}